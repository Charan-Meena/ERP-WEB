USE [master]
GO
/****** Object:  Database [ARP]    Script Date: 08-07-2025 19:08:50 ******/
CREATE DATABASE [ARP]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'ARP', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\ARP.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'ARP_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\ARP_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [ARP] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [ARP].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [ARP] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [ARP] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [ARP] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [ARP] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [ARP] SET ARITHABORT OFF 
GO
ALTER DATABASE [ARP] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [ARP] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [ARP] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [ARP] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [ARP] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [ARP] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [ARP] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [ARP] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [ARP] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [ARP] SET  ENABLE_BROKER 
GO
ALTER DATABASE [ARP] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [ARP] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [ARP] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [ARP] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [ARP] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [ARP] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [ARP] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [ARP] SET RECOVERY FULL 
GO
ALTER DATABASE [ARP] SET  MULTI_USER 
GO
ALTER DATABASE [ARP] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [ARP] SET DB_CHAINING OFF 
GO
ALTER DATABASE [ARP] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [ARP] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [ARP] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [ARP] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'ARP', N'ON'
GO
ALTER DATABASE [ARP] SET QUERY_STORE = OFF
GO
USE [ARP]
GO
/****** Object:  Table [dbo].[Batch_master]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Batch_master](
	[Batch_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[programeId] [int] NULL,
	[Batch_name] [varchar](10) NULL,
	[Start_Session] [varchar](15) NULL,
	[End_Session] [varchar](15) NULL,
	[Batch_Year] [varchar](5) NULL,
	[currentSem_year] [int] NULL,
	[startSem_year] [int] NULL,
	[endSem_year] [int] NULL,
	[Course_Duration] [varchar](7) NULL,
	[Semester_Year] [varchar](12) NULL,
	[Intake] [bigint] NULL,
	[coursScheme] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Sem_Year]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Sem_Year](
	[Sem_YearID] [int] NULL,
	[Sem_Year_Name] [varchar](20) NULL,
	[Sem_Year_Value] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Role_Table]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Role_Table](
	[roleId] [int] IDENTITY(1,1) NOT NULL,
	[role] [nvarchar](50) NULL,
	[ActiveStatus] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_CourseScheme]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_CourseScheme](
	[courseSchemeID] [int] IDENTITY(1,1) NOT NULL,
	[courseSchemeName] [varchar](100) NULL,
	[programeID] [int] NULL,
	[isActive] [bit] NULL,
	[createdby] [int] NULL,
	[Updatedby] [int] NULL,
	[craetedon] [date] NULL,
	[updatedon] [date] NULL,
	[examPattern] [nvarchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_Designation]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_Designation](
	[dId] [int] IDENTITY(1,1) NOT NULL,
	[Designation] [varchar](20) NULL,
	[IsActive] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_ExamPaper]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_ExamPaper](
	[SubjectCourseID] [int] IDENTITY(1,1) NOT NULL,
	[courseSchemeID] [int] NULL,
	[examPattern] [nvarchar](100) NULL,
	[SemYear] [int] NULL,
	[IsCompulsory] [int] NULL,
	[SubjSeq] [int] NULL,
	[SubjName] [nvarchar](1000) NULL,
	[SubjectCode] [nvarchar](1000) NULL,
	[TheoryMax] [int] NULL,
	[TheoryMin] [int] NULL,
	[PractMax] [int] NULL,
	[PractMin] [int] NULL,
	[SesMax] [int] NULL,
	[SesMin] [int] NULL,
	[MaxTotal] [int] NULL,
	[MinTotal] [int] NULL,
	[Passing_On_Rule] [varchar](100) NULL,
	[createdBy] [int] NULL,
	[createdon] [date] NULL,
	[Updatedby] [int] NULL,
	[updatedon] [date] NULL,
	[ActiveStatus] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_ExamQuestionBank]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_ExamQuestionBank](
	[questionId] [int] IDENTITY(1,1) NOT NULL,
	[paperID] [int] NULL,
	[question] [nvarchar](max) NULL,
	[optionA] [nvarchar](1000) NULL,
	[optionB] [nvarchar](1000) NULL,
	[optionC] [nvarchar](100) NULL,
	[optionD] [nvarchar](1000) NULL,
	[answer] [nvarchar](10) NULL,
	[isActive] [bit] NULL,
	[createdBy] [int] NULL,
	[createdOn] [date] NULL,
	[updatedBy] [int] NULL,
	[updatedOn] [date] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_ExamSchedule]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_ExamSchedule](
	[examScheduleID] [int] IDENTITY(1,1) NOT NULL,
	[programeId] [int] NULL,
	[batch_Id] [int] NULL,
	[semester_year] [int] NULL,
	[examSession] [varchar](20) NULL,
	[openDate] [date] NULL,
	[closeDate] [date] NULL,
	[createdBy] [int] NULL,
	[createdon] [date] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_ExamSchedule_Student]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_ExamSchedule_Student](
	[ExamSchedule_StudentID] [int] IDENTITY(1,1) NOT NULL,
	[examScheduleID] [int] NULL,
	[studentID] [int] NULL,
	[isExamFormForwarded] [bit] NULL,
	[isExamFormFill] [bit] NULL,
	[isActive] [bit] NULL,
	[createdby] [int] NULL,
	[createdOn] [date] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_ExamStudentSlots_Marks]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_ExamStudentSlots_Marks](
	[ExamStudentSlots_MarksID] [int] IDENTITY(1,1) NOT NULL,
	[examScheduleID] [int] NULL,
	[studentID] [int] NULL,
	[userID] [int] NULL,
	[SubjectCourseID] [int] NULL,
	[examdate] [date] NULL,
	[SemYear] [int] NULL,
	[TheoryMax] [int] NULL,
	[TheoryMin] [int] NULL,
	[obtainTheory] [int] NULL,
	[PractMax] [int] NULL,
	[PractMin] [int] NULL,
	[obtainPractical] [int] NULL,
	[SesMax] [int] NULL,
	[SesMin] [int] NULL,
	[obtainSess] [int] NULL,
	[MaxTotal] [int] NULL,
	[MinTotal] [int] NULL,
	[obtainMAx] [int] NULL,
	[createdBy] [int] NULL,
	[createdon] [date] NULL,
	[Updatedby] [int] NULL,
	[updatedon] [date] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_Login]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_Login](
	[userID] [int] IDENTITY(1,1) NOT NULL,
	[userName] [varchar](200) NULL,
	[passwordhash] [varchar](max) NULL,
	[activeStatus] [bit] NULL,
	[userrole] [varchar](max) NULL,
	[lastLogin] [datetime] NULL,
	[entityTypeId] [int] NULL,
	[parentId] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_ProgrameMaster]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_ProgrameMaster](
	[ProgrameID] [int] IDENTITY(1,1) NOT NULL,
	[ProgrameName] [varchar](300) NULL,
	[ProgrameDuration] [varchar](100) NULL,
	[ProgrameLebel] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_StaffInfo]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_StaffInfo](
	[userID] [int] NULL,
	[fullname] [nvarchar](1000) NULL,
	[email] [nvarchar](200) NULL,
	[phoneNumber] [nvarchar](50) NULL,
	[gender] [nvarchar](10) NULL,
	[dob] [date] NULL,
	[staffCode] [nvarchar](200) NULL,
	[departmentID] [int] NULL,
	[designation] [varchar](200) NULL,
	[joiningDate] [date] NULL,
	[activeStatus] [bit] NULL,
	[entityType] [int] NULL,
	[parentId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_StudentBatchAlloted]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_StudentBatchAlloted](
	[stuentBatchAllotedID] [int] IDENTITY(1,1) NOT NULL,
	[studentID] [int] NULL,
	[userID] [int] NULL,
	[Batch_ID] [int] NULL,
	[current_sem_year] [int] NULL,
	[isActive] [bit] NULL,
	[createdby] [int] NULL,
	[createdOn] [date] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_studentExamSubmit]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_studentExamSubmit](
	[submitID] [int] IDENTITY(1,1) NOT NULL,
	[studentID] [int] NULL,
	[paperID] [int] NULL,
	[questionId] [int] NULL,
	[answer] [varchar](10) NULL,
	[givenAnswer] [varchar](10) NULL,
	[examSession] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_StudentInfo]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_StudentInfo](
	[studentID] [int] IDENTITY(1,1) NOT NULL,
	[userID] [int] NULL,
	[fullname] [nvarchar](1000) NULL,
	[email] [nvarchar](200) NULL,
	[phoneNumber] [nvarchar](50) NULL,
	[gender] [nvarchar](10) NULL,
	[dob] [datetime] NULL,
	[activeStatus] [bit] NULL,
	[entityType] [int] NULL,
	[parentId] [int] NULL,
	[Batch_ID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_User_login]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_User_login](
	[loginID] [nvarchar](50) NULL,
	[Password] [nvarchar](max) NULL,
	[UserName] [nvarchar](50) NULL,
	[Fullname] [nvarchar](1000) NULL,
	[Email] [nvarchar](200) NULL,
	[PhoneNumber] [nvarchar](50) NULL,
	[gender] [nvarchar](10) NULL,
	[UserId] [bigint] IDENTITY(1,1) NOT NULL,
	[entityType] [int] NULL,
	[parentId] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tbl_UserRoll]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tbl_UserRoll](
	[rollID] [int] IDENTITY(1,1) NOT NULL,
	[rollName] [varchar](200) NULL,
	[parentId] [int] NULL,
	[entityType] [int] NULL
) ON [PRIMARY]
GO
SET IDENTITY_INSERT [dbo].[Batch_master] ON 
GO
INSERT [dbo].[Batch_master] ([Batch_ID], [programeId], [Batch_name], [Start_Session], [End_Session], [Batch_Year], [currentSem_year], [startSem_year], [endSem_year], [Course_Duration], [Semester_Year], [Intake], [coursScheme]) VALUES (1, 1, N'BCA-2025', N'JUNE-2025', N'JUNE-2028', N'2025', 1, 1, 6, N'3 Year', N'Semster', 60, 1)
GO
INSERT [dbo].[Batch_master] ([Batch_ID], [programeId], [Batch_name], [Start_Session], [End_Session], [Batch_Year], [currentSem_year], [startSem_year], [endSem_year], [Course_Duration], [Semester_Year], [Intake], [coursScheme]) VALUES (2, 2, N'DCA-2025', N'JUNE-2025', N'JUNE-2026', N'2025', 1, 1, 2, N'1 Year', N'Semester', 100, 2)
GO
SET IDENTITY_INSERT [dbo].[Batch_master] OFF
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (1, N'First', 1)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (2, N'Second', 2)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (3, N'Third', 3)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (4, N'Fourth', 4)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (5, N'Fifth', 5)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (6, N'Sixth', 6)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (7, N'Seventh', 7)
GO
INSERT [dbo].[MST_Sem_Year] ([Sem_YearID], [Sem_Year_Name], [Sem_Year_Value]) VALUES (8, N'Eighth', 8)
GO
SET IDENTITY_INSERT [dbo].[Role_Table] ON 
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (1, N'Super Admin', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (2, N'Admin', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (3, N'TL', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (4, N'SD', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (5, N'JD', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (6, N'HR', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (7, N'Finance', 1)
GO
INSERT [dbo].[Role_Table] ([roleId], [role], [ActiveStatus]) VALUES (8, N'Account', 1)
GO
SET IDENTITY_INSERT [dbo].[Role_Table] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_CourseScheme] ON 
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (1, N'CS-BCA-25', 1, 1, NULL, NULL, NULL, NULL, N'Semster')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (2, N'CS-DCA-25', 2, 1, NULL, NULL, NULL, NULL, N'Semster')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (3, N'CS-BCA-18', 1, 1, NULL, NULL, NULL, NULL, N'Semster')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (4, N'BSC-21', 1, 1, NULL, NULL, NULL, NULL, N'Semster')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (5, N'BSC-22', 3, 1, NULL, NULL, NULL, NULL, N'Semster')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (6, N'BSC-23', 3, 1, NULL, NULL, NULL, NULL, N'Semster')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (1005, N'CS-MBA22', 6, 1, NULL, NULL, NULL, NULL, N'Yearly')
GO
INSERT [dbo].[Tbl_CourseScheme] ([courseSchemeID], [courseSchemeName], [programeID], [isActive], [createdby], [Updatedby], [craetedon], [updatedon], [examPattern]) VALUES (1006, N'Test1', 1, 1, NULL, NULL, NULL, NULL, N'test')
GO
SET IDENTITY_INSERT [dbo].[Tbl_CourseScheme] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_Designation] ON 
GO
INSERT [dbo].[Tbl_Designation] ([dId], [Designation], [IsActive]) VALUES (1, N'TL', 1)
GO
INSERT [dbo].[Tbl_Designation] ([dId], [Designation], [IsActive]) VALUES (2, N'Project Manager', 1)
GO
SET IDENTITY_INSERT [dbo].[Tbl_Designation] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamPaper] ON 
GO
INSERT [dbo].[Tbl_ExamPaper] ([SubjectCourseID], [courseSchemeID], [examPattern], [SemYear], [IsCompulsory], [SubjSeq], [SubjName], [SubjectCode], [TheoryMax], [TheoryMin], [PractMax], [PractMin], [SesMax], [SesMin], [MaxTotal], [MinTotal], [Passing_On_Rule], [createdBy], [createdon], [Updatedby], [updatedon], [ActiveStatus]) VALUES (1, 1, N'Semster', 1, 1, 1, N'Fundamental of Computers', N'BC-101', 70, 28, 20, 10, 10, 5, 100, NULL, NULL, NULL, NULL, NULL, NULL, 1)
GO
INSERT [dbo].[Tbl_ExamPaper] ([SubjectCourseID], [courseSchemeID], [examPattern], [SemYear], [IsCompulsory], [SubjSeq], [SubjName], [SubjectCode], [TheoryMax], [TheoryMin], [PractMax], [PractMin], [SesMax], [SesMin], [MaxTotal], [MinTotal], [Passing_On_Rule], [createdBy], [createdon], [Updatedby], [updatedon], [ActiveStatus]) VALUES (2, 1, N'Semster', 1, 1, 2, N'Computer Oriented Numerical Analysis', N'BC-102', 70, 28, 20, 10, 10, 5, 100, NULL, NULL, NULL, NULL, NULL, NULL, 1)
GO
INSERT [dbo].[Tbl_ExamPaper] ([SubjectCourseID], [courseSchemeID], [examPattern], [SemYear], [IsCompulsory], [SubjSeq], [SubjName], [SubjectCode], [TheoryMax], [TheoryMin], [PractMax], [PractMin], [SesMax], [SesMin], [MaxTotal], [MinTotal], [Passing_On_Rule], [createdBy], [createdon], [Updatedby], [updatedon], [ActiveStatus]) VALUES (3, 1, N'Semster', 1, 1, 3, N'Communication Skills', N'BC-103', 70, 28, 20, 10, 10, 5, 100, NULL, NULL, NULL, NULL, NULL, NULL, 1)
GO
INSERT [dbo].[Tbl_ExamPaper] ([SubjectCourseID], [courseSchemeID], [examPattern], [SemYear], [IsCompulsory], [SubjSeq], [SubjName], [SubjectCode], [TheoryMax], [TheoryMin], [PractMax], [PractMin], [SesMax], [SesMin], [MaxTotal], [MinTotal], [Passing_On_Rule], [createdBy], [createdon], [Updatedby], [updatedon], [ActiveStatus]) VALUES (4, 1, N'Semster', 1, 1, 3, N'Programing Laboratory in C ', N'BC-104', 70, 28, 20, 10, 10, 5, 100, NULL, NULL, NULL, NULL, NULL, NULL, 1)
GO
INSERT [dbo].[Tbl_ExamPaper] ([SubjectCourseID], [courseSchemeID], [examPattern], [SemYear], [IsCompulsory], [SubjSeq], [SubjName], [SubjectCode], [TheoryMax], [TheoryMin], [PractMax], [PractMin], [SesMax], [SesMin], [MaxTotal], [MinTotal], [Passing_On_Rule], [createdBy], [createdon], [Updatedby], [updatedon], [ActiveStatus]) VALUES (5, 1, N'Semster', 1, 1, 3, N'PC Package', N'BC-104', 70, 28, 20, 10, 10, 5, 100, NULL, NULL, NULL, NULL, NULL, NULL, 1)
GO
INSERT [dbo].[Tbl_ExamPaper] ([SubjectCourseID], [courseSchemeID], [examPattern], [SemYear], [IsCompulsory], [SubjSeq], [SubjName], [SubjectCode], [TheoryMax], [TheoryMin], [PractMax], [PractMin], [SesMax], [SesMin], [MaxTotal], [MinTotal], [Passing_On_Rule], [createdBy], [createdon], [Updatedby], [updatedon], [ActiveStatus]) VALUES (6, 1, N'Semster', 2, 1, 1, N'DBMS ', N'BC-201', 70, 28, 20, 10, 10, 5, 100, NULL, NULL, NULL, NULL, NULL, NULL, 1)
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamPaper] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamQuestionBank] ON 
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (1, 1, N'Who is the father of Computers?', N' James Gosling', N'Charles Babbage', N'Dennis Ritchie', N'Bjarne Stroustrup', N'B', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (2, 1, N'Which of the following is the correct abbreviation of COMPUTER?
', N'Commonly Occupied Machines Used in Technical and Educational Research', N' Commonly Operated Machines Used in Technical and Environmental Research', N'Commonly Oriented Machines Used in Technical and Educational Research', N'Commonly Operated Machines Used in Technical and Educational Research', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (3, 1, N'Which of the following is the correct definition of Computer?', N' Computer is a machine or device that can be programmed to perform arithmetical or logic operation s', N' Computer understands only binary language which is written in the form of 0s & 1s', N' Computer is a programmable electron device that stores, retrieves, and processes the data', N'All of the mentioned', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (4, 1, N'What is the full form of CPU?', N'Computer Processing Unit', N'Computer Principle Unit', N'Central Processing Unit', N'Control Processing Unit', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (5, 1, N'Which of the following language does the computer understand?', N'Computer understands only C Language', N'Computer understands only Assembly Language', N'Computer understands only Binary Language', N'Computer understands only BASIC', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (6, 1, N'Which of the following computer language is written in binary codes only?', N'pascal', N'machine language', N'C', N'C#', N'B', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (7, 1, N'Which of the following is the brain of the computer?', N'Central Processing Unit', N'Memory', N'Arithmetic and Logic unit', N'Control unit', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (8, 1, N'Which of the following is not a characteristic of a computer?', N'Versatility', N'Accuracy', N'Diligence', N'I.Q.', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (9, 1, N'Which of the following is the smallest unit of data in a computer?
', N'Bit', N'KB', N'Nibble', N'Byte', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (10, 1, N'Which of the following unit is responsible for converting the data received from the user into a computer understandable format?', N'Output Unit', N'Input Unit', N'Memory Unit', N'Arithmetic & Logic Unit', N'B', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (11, 1, N'Which of the following monitor looks like a television and are normally used with non-portable computer systems?', N'LED', N'LCD', N'CRT', N'Flat Panel Monitors', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (12, 1, N'Which of the following is not a type of computer code?', N'EDIC', N'ASCII', N'BCD', N'EBCDIC', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (13, 1, N'Which of the following part of a processor contains the hardware necessary to perform all the operations required by a computer?', N'Controller', N'Registers', N'Cache', N'Data path', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (14, 1, N'Which of the following is designed to control the operations of a computer?', N'User', N'Application Software', N'System Software', N'Utility Software', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (15, 1, N'Which of the following is used in EBCDIC?', N'Super Computers', N'Mainframes', N'Machine Codes', N'Programming', N'B', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (16, 1, N'Which of the following are physical devices of a computer?', N'Hardware', N'Software', N'System Software', N'Package', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (17, 1, N'Which of the following defines the assigned ordering among the characters used by the computer?', N'Accumulation', N'Sorting', N'Collating Sequence', N'Unicode', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (18, 1, N'Which of the following storage is a system where a robotic arm will connect or disconnect off-line mass storage media according to the computer operating system demands?
', N'Magnetic', N'Secondary', N'Virtual', N'Tertiary', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (19, 1, N'20. Which of the following is known as the interval between the instant a computer makes a request for the transfer of data from a disk system to the primary storage and the instance the operation is completed?', N'Disk utilization time', N'Drive utilization time', N'Disk access time', N'Disk arrival time', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (20, 1, N'Which of the following devices provides the communication between a computer and the outer world?', N'Compact', N' I/O', N'Drivers', N'Storage', N'B', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (21, 1, N'Which of the following are the input devices that enable direct data entry into a computer system from source documents?', N'System Access devices', N'Data acquiring devices', N'Data retrieving devices', N'Data Scanning devices', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (22, 1, N'Which of the following is the device used for converting maps, pictures, and drawings into digital form for storage in computers?', N'Image Scanner', N'MICR', N'Digitizer', N'Scanner', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (23, 1, N'Which of the following can access the server?', N'Web Client', N'User', N'Web Browser', N'Web Server', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (24, 1, N'Which of the following is known as the language made up of binary-coded instructions?', N'High level', N'BASIC', N'C', N'Machine', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (25, 1, N'Which of the following package allows individuals to use personal computers for storing and retrieving their personal information?', N'Personal assistance package', N'Graphics package', N'Spreadsheet package', N'Animation package', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (26, 1, N'Which of the following is created when a user opens an account in the computer system?', N'SFD', N'MFD', N'Subdirectory', N'RFD', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (27, 1, N'Which of the following is a technique that marked the beginning of computer communications?', N'User Environment', N'Batch Environment', N'Time Sharing', N'Message passing', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (28, 1, N'Which of the following is a type of technique in which dumb terminals are connected to a central computer system?
', N'Time Sharing', N'Message passing', N'Batch environment', N'User environment', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (29, 1, N'Which of the following service allows a user to log in to another computer somewhere on the Internet?', N'e-mail', N'UseNet', N'Telnet', N'FTP', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (30, 1, N'Which of the following is not a type of computer on the basis of operation?', N'Digital', N'Analog', N'Hybrid', N'Remote', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (31, 1, N'Which of the following invention gave birth to the much cheaper microcomputers?', N'PDAs', N'Microprocessors', N'Microcomputers', N'Mainframes', N'B', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (32, 1, N'Which of the following computers are lower than mainframe computers in terms of speed and storage capacity?', N'Mainframes', N'Hybrid', N'Mini', N'Super', N'C', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (33, 1, N'Which of the following is the first neural network computer?', N'AN', N'AM', N'RFD', N'SNARC', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (34, 1, N'Electronic circuits that operate on one or more input signals to produce standard output.', N'Series circuits', N'Parallel Circuits', N'Logic Signals', N'Logic Gates', N'D', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (35, 1, N'Logic Gates are the building blocks of all circuits in a computer.', N'True', N'False', N'null', N'null', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (36, 1, N'A __________ gate gives the output as 1 only if all the inputs signals are 1.', N'AND', N'OR', N'EXOR', N'NOR', N'A', 1, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamQuestionBank] ([questionId], [paperID], [question], [optionA], [optionB], [optionC], [optionD], [answer], [isActive], [createdBy], [createdOn], [updatedBy], [updatedOn]) VALUES (37, 1, N'The boolean expression of an OR gate is _______', N'A.B', N'A’B+AB’', N' A+B', N' A’B’', N'C', 1, NULL, NULL, NULL, NULL)
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamQuestionBank] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamSchedule] ON 
GO
INSERT [dbo].[Tbl_ExamSchedule] ([examScheduleID], [programeId], [batch_Id], [semester_year], [examSession], [openDate], [closeDate], [createdBy], [createdon]) VALUES (1, 1, 1, 1, N'June-2025', CAST(N'2025-07-01' AS Date), CAST(N'2025-07-16' AS Date), NULL, NULL)
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamSchedule] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamSchedule_Student] ON 
GO
INSERT [dbo].[Tbl_ExamSchedule_Student] ([ExamSchedule_StudentID], [examScheduleID], [studentID], [isExamFormForwarded], [isExamFormFill], [isActive], [createdby], [createdOn]) VALUES (1, 1, 1, 0, 0, 1, NULL, CAST(N'2025-07-05' AS Date))
GO
INSERT [dbo].[Tbl_ExamSchedule_Student] ([ExamSchedule_StudentID], [examScheduleID], [studentID], [isExamFormForwarded], [isExamFormFill], [isActive], [createdby], [createdOn]) VALUES (2, 1, 2, 0, 0, 1, NULL, CAST(N'2025-07-05' AS Date))
GO
INSERT [dbo].[Tbl_ExamSchedule_Student] ([ExamSchedule_StudentID], [examScheduleID], [studentID], [isExamFormForwarded], [isExamFormFill], [isActive], [createdby], [createdOn]) VALUES (3, 1, 3, 0, 0, 1, NULL, CAST(N'2025-07-05' AS Date))
GO
INSERT [dbo].[Tbl_ExamSchedule_Student] ([ExamSchedule_StudentID], [examScheduleID], [studentID], [isExamFormForwarded], [isExamFormFill], [isActive], [createdby], [createdOn]) VALUES (4, 1, 4, 0, 1, 1, NULL, CAST(N'2025-07-05' AS Date))
GO
INSERT [dbo].[Tbl_ExamSchedule_Student] ([ExamSchedule_StudentID], [examScheduleID], [studentID], [isExamFormForwarded], [isExamFormFill], [isActive], [createdby], [createdOn]) VALUES (5, 1, 5, 0, 1, 1, NULL, CAST(N'2025-07-05' AS Date))
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamSchedule_Student] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ON 
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (1, 1, 5, 5, 1, CAST(N'2025-07-15' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (2, 1, 5, 5, 2, CAST(N'2025-07-16' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (3, 1, 5, 5, 3, CAST(N'2025-07-17' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (4, 1, 5, 5, 4, CAST(N'2025-07-04' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (5, 1, 5, 5, 5, CAST(N'2025-07-05' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (6, 1, 4, 4, 1, CAST(N'2025-07-22' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (7, 1, 4, 4, 2, CAST(N'2025-07-24' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (8, 1, 4, 4, 3, CAST(N'2025-07-17' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (9, 1, 4, 4, 4, CAST(N'2025-07-09' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
INSERT [dbo].[Tbl_ExamStudentSlots_Marks] ([ExamStudentSlots_MarksID], [examScheduleID], [studentID], [userID], [SubjectCourseID], [examdate], [SemYear], [TheoryMax], [TheoryMin], [obtainTheory], [PractMax], [PractMin], [obtainPractical], [SesMax], [SesMin], [obtainSess], [MaxTotal], [MinTotal], [obtainMAx], [createdBy], [createdon], [Updatedby], [updatedon]) VALUES (10, 1, 4, 4, 5, CAST(N'2025-07-25' AS Date), 1, 70, 28, NULL, 20, 10, NULL, 10, 5, NULL, 100, NULL, NULL, NULL, NULL, NULL, NULL)
GO
SET IDENTITY_INSERT [dbo].[Tbl_ExamStudentSlots_Marks] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_Login] ON 
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (1, N'7800000001', N'MNY9AjGHl2ceXOMGwJbzgV8ccXjFfhIFUQYg5uaUr2I=', 1, N'', NULL, 6, 0)
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (2, N'7800000002', N'MNY9AjGHl2ceXOMGwJbzgfYq7HDwEnJa1tlg/RULTg4=', 1, N'', NULL, 6, 0)
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (3, N'7800000003', N'MNY9AjGHl2ceXOMGwJbzgXQn/bVQaKAVs552GRsgufM=', 1, N'', NULL, 6, 0)
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (4, N'7800000004', N'MNY9AjGHl2ceXOMGwJbzgWVWEiLC6JxiArw9dutjwUM=', 1, N'', NULL, 6, 0)
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (5, N'7800000005', N'MNY9AjGHl2ceXOMGwJbzgUpIuvqVpbeMBCLqAa206Bw=', 1, N'', NULL, 6, 0)
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (6, N'2222222222', N'v0OwiKlqYHVM1gesD4QVhywwg+kkaXAaGrcooAjUxxs=', 1, N'', NULL, 2, 0)
GO
INSERT [dbo].[Tbl_Login] ([userID], [userName], [passwordhash], [activeStatus], [userrole], [lastLogin], [entityTypeId], [parentId]) VALUES (7, N'7800000006', N'MNY9AjGHl2ceXOMGwJbzgXojpbrQBTmIwXoEqBwI6X4=', 1, N'', NULL, 6, 0)
GO
SET IDENTITY_INSERT [dbo].[Tbl_Login] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_ProgrameMaster] ON 
GO
INSERT [dbo].[Tbl_ProgrameMaster] ([ProgrameID], [ProgrameName], [ProgrameDuration], [ProgrameLebel]) VALUES (1, N'BCA', N'3 Years', N'UG')
GO
INSERT [dbo].[Tbl_ProgrameMaster] ([ProgrameID], [ProgrameName], [ProgrameDuration], [ProgrameLebel]) VALUES (2, N'DCA', N'1 Year', N'Diploma')
GO
INSERT [dbo].[Tbl_ProgrameMaster] ([ProgrameID], [ProgrameName], [ProgrameDuration], [ProgrameLebel]) VALUES (3, N'BSC-PCM', N'3 Year', N'UG')
GO
INSERT [dbo].[Tbl_ProgrameMaster] ([ProgrameID], [ProgrameName], [ProgrameDuration], [ProgrameLebel]) VALUES (4, N'MCA', N'2 Year', N'PG')
GO
INSERT [dbo].[Tbl_ProgrameMaster] ([ProgrameID], [ProgrameName], [ProgrameDuration], [ProgrameLebel]) VALUES (5, N'MSC', N'2 Year', N'PG')
GO
INSERT [dbo].[Tbl_ProgrameMaster] ([ProgrameID], [ProgrameName], [ProgrameDuration], [ProgrameLebel]) VALUES (6, N'MBA', N'2 Year', N'PG Diploma')
GO
SET IDENTITY_INSERT [dbo].[Tbl_ProgrameMaster] OFF
GO
INSERT [dbo].[Tbl_StaffInfo] ([userID], [fullname], [email], [phoneNumber], [gender], [dob], [staffCode], [departmentID], [designation], [joiningDate], [activeStatus], [entityType], [parentId]) VALUES (6, N'University Admin', N'uniadmin@gmail.com', N'2222222222', N'male', CAST(N'2000-01-26' AS Date), NULL, NULL, NULL, NULL, 1, 2, 0)
GO
SET IDENTITY_INSERT [dbo].[Tbl_StudentBatchAlloted] ON 
GO
INSERT [dbo].[Tbl_StudentBatchAlloted] ([stuentBatchAllotedID], [studentID], [userID], [Batch_ID], [current_sem_year], [isActive], [createdby], [createdOn]) VALUES (1, 1, 1, 1, 1, 1, NULL, NULL)
GO
INSERT [dbo].[Tbl_StudentBatchAlloted] ([stuentBatchAllotedID], [studentID], [userID], [Batch_ID], [current_sem_year], [isActive], [createdby], [createdOn]) VALUES (2, 2, 2, 1, 1, 1, NULL, NULL)
GO
INSERT [dbo].[Tbl_StudentBatchAlloted] ([stuentBatchAllotedID], [studentID], [userID], [Batch_ID], [current_sem_year], [isActive], [createdby], [createdOn]) VALUES (3, 3, 3, 1, 1, 1, NULL, NULL)
GO
INSERT [dbo].[Tbl_StudentBatchAlloted] ([stuentBatchAllotedID], [studentID], [userID], [Batch_ID], [current_sem_year], [isActive], [createdby], [createdOn]) VALUES (4, 4, 4, 1, 1, 1, NULL, NULL)
GO
INSERT [dbo].[Tbl_StudentBatchAlloted] ([stuentBatchAllotedID], [studentID], [userID], [Batch_ID], [current_sem_year], [isActive], [createdby], [createdOn]) VALUES (5, 5, 5, 1, 1, 1, NULL, NULL)
GO
SET IDENTITY_INSERT [dbo].[Tbl_StudentBatchAlloted] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_studentExamSubmit] ON 
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (1, 0, 1, 2, N'D', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (2, 0, 1, 12, N'A', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (3, 0, 1, 3, N'D', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (4, 0, 1, 4, N'C', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (5, 0, 1, 17, N'C', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (6, 0, 1, 8, N'D', N'C', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (7, 0, 1, 13, N'D', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (8, 0, 1, 16, N'A', N'B', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (9, 0, 1, 15, N'B', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (10, 0, 1, 6, N'B', N'C', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (11, 0, 1, 11, N'C', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (12, 0, 1, 5, N'C', N'C', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (13, 0, 1, 7, N'A', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (14, 0, 1, 14, N'C', N'', NULL)
GO
INSERT [dbo].[Tbl_studentExamSubmit] ([submitID], [studentID], [paperID], [questionId], [answer], [givenAnswer], [examSession]) VALUES (15, 0, 1, 9, N'A', N'D', NULL)
GO
SET IDENTITY_INSERT [dbo].[Tbl_studentExamSubmit] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_StudentInfo] ON 
GO
INSERT [dbo].[Tbl_StudentInfo] ([studentID], [userID], [fullname], [email], [phoneNumber], [gender], [dob], [activeStatus], [entityType], [parentId], [Batch_ID]) VALUES (1, 1, N'Abhilash Kumar', N'abhilash@gmail.com', N'7800000001', N'male', CAST(N'2004-06-25T00:00:00.000' AS DateTime), 1, 6, 0, 1)
GO
INSERT [dbo].[Tbl_StudentInfo] ([studentID], [userID], [fullname], [email], [phoneNumber], [gender], [dob], [activeStatus], [entityType], [parentId], [Batch_ID]) VALUES (2, 2, N'Atit Singh', N'itsatit@gmail.com', N'7800000002', N'male', CAST(N'1999-10-24T00:00:00.000' AS DateTime), 1, 6, 0, 1)
GO
INSERT [dbo].[Tbl_StudentInfo] ([studentID], [userID], [fullname], [email], [phoneNumber], [gender], [dob], [activeStatus], [entityType], [parentId], [Batch_ID]) VALUES (3, 3, N'Babli Kumari', N'bablikumari@yahoo.com', N'7800000003', N'female', CAST(N'2005-11-03T00:00:00.000' AS DateTime), 1, 6, 0, 1)
GO
INSERT [dbo].[Tbl_StudentInfo] ([studentID], [userID], [fullname], [email], [phoneNumber], [gender], [dob], [activeStatus], [entityType], [parentId], [Batch_ID]) VALUES (4, 4, N'Dayaram Sahu', N'dayas@gmail.com', N'7800000004', N'male', CAST(N'2004-08-11T00:00:00.000' AS DateTime), 1, 6, 0, 1)
GO
INSERT [dbo].[Tbl_StudentInfo] ([studentID], [userID], [fullname], [email], [phoneNumber], [gender], [dob], [activeStatus], [entityType], [parentId], [Batch_ID]) VALUES (5, 5, N'Daya Shankar Pandey', N'dspandey@gmail.com', N'7800000005', N'male', CAST(N'2003-03-21T00:00:00.000' AS DateTime), 1, 6, 0, 1)
GO
INSERT [dbo].[Tbl_StudentInfo] ([studentID], [userID], [fullname], [email], [phoneNumber], [gender], [dob], [activeStatus], [entityType], [parentId], [Batch_ID]) VALUES (7, 7, N'Nitish Rana', N'nitishrana@gmail.com', N'7800000006', N'male', CAST(N'1998-07-21T00:00:00.000' AS DateTime), 1, 6, 0, NULL)
GO
SET IDENTITY_INSERT [dbo].[Tbl_StudentInfo] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_User_login] ON 
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'Shankar', N'gxf+9DKTdR1XylLE2N8E7A==', N'Shankar', N'Shankar', N'shankar@gmail.com', N'982647894', N'male', 1, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'Akash', N'hF1JkBmfx08IfL2JGBapDg==', N'Akash', N'Akash', N'', N'7845219634', N'male', 2, 1, 1)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'Kailash', N'0U7XGYtX++DHUdtOLZigVA==', N'Kailash', N'Kailash', N'kailash@gmail.com', N'9856387521', N'male', 3, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'bnmsbdfmndsbnfmbdsnmf', N'4yyruN7flzIscL7oKcMwIiGtfldJtlBhhhDC1sChgBCXufgMX29qCf5l3jLCuQov', N'bdnmbnmdsbfmns', N'bsmndbnmdbsnmf', N'bnsmdbcnmsbfnm', N'bnmsbdnbdshfjsh', N'male', 8, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'kjkdsjfkdsjklfjdskljf', N'NSGCIdA1KYFz34mH1O0wzTmWmrDknwcAMRfKs09Duj7u4XHYXoM/ssLS0+yNEIsP', N'lknsdnfdsnf', N'nsdnfdslkfjlk', N'lkjlksdjfdskfk', N'jfjkdjflkjdslkfj', N'male', 9, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'kjkljklvjdflkjgfl', N'YBVYERtG607vcerU1sHvyaTjSEiPMMmoHqDtyIFmaKN79m8Jw47JWv3tvc5AAYXW', N'lknvddgfkhjdlksjh', N'dhkjdshgkfdhghfd', N'jkljfkdsfkhdsklhgfdlkh', N'kljkljdfkljdsklfjdlksjkl', N'male', 10, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'Ramnath', N'VJhs4YA21TpfczVF5BeGag==', N'Ramnath', N'Ramnath', N'Ramnath', N'Ramnath', N'male', 11, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'hhhhhhhhh', N'dcBJy9MuarnZgUY3agOOvuVUj42FP6KUgBO6jrnkkfs=', N'hhhhhhhhh', N'hhhhhhhhh', N'hhhhhhhhh', N'hhhhhhhhh', N'female', 12, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'fhfghgfh', N'kpsbqRSVN7n9hj3l9Fva+Q==', N'dfgfdghfdh', N'dsfdsfd', N'dfgfdghfdh', N'fdhfghgf', N'male', 10012, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'fdgfdg', N'zk0jcijOBbukz+HN3buh2XgkSZ8Fvi/CPcD1f3AyyLM=', N'dgfdgfd', N'dsgfdsgfd', N'gdfgfdgfd', N'ffdgfdg', N'male', 10013, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'fghgfh', N'wc7PF3XhB3JyH1OnA+e+fw==', N'hbfghgf', N'dfgfd', N'hfghgfh', N'fghgfh', N'male', 10015, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'fddfgfdhg', N'XCZZ9MCRCkW5GuV7LWBkPZXCOA1fl32G3EQsTy81qGA=', N'dgdfg', N'dfsdgd', N'dfgdfgfd', N'dfgfdg', N'male', 10016, 6, 4)
GO
INSERT [dbo].[Tbl_User_login] ([loginID], [Password], [UserName], [Fullname], [Email], [PhoneNumber], [gender], [UserId], [entityType], [parentId]) VALUES (N'fhfghgfhfghgf', N'mtn59igf2BkOeCVWhqtkD9rWx5SkEdEVB6b8+TroWnQ=', N'dfgdfgtfhg', N'sgsgdf', N'tfrhdhgtrhgt', N'fdhfghgfh', N'male', 10017, 6, 4)
GO
SET IDENTITY_INSERT [dbo].[Tbl_User_login] OFF
GO
SET IDENTITY_INSERT [dbo].[Tbl_UserRoll] ON 
GO
INSERT [dbo].[Tbl_UserRoll] ([rollID], [rollName], [parentId], [entityType]) VALUES (1, N'TechAdmin', 1, 1)
GO
INSERT [dbo].[Tbl_UserRoll] ([rollID], [rollName], [parentId], [entityType]) VALUES (2, N'University', 1, 2)
GO
INSERT [dbo].[Tbl_UserRoll] ([rollID], [rollName], [parentId], [entityType]) VALUES (3, N'UniversityEmployee', 2, 3)
GO
INSERT [dbo].[Tbl_UserRoll] ([rollID], [rollName], [parentId], [entityType]) VALUES (4, N'CollegeAdmin', 2, 4)
GO
INSERT [dbo].[Tbl_UserRoll] ([rollID], [rollName], [parentId], [entityType]) VALUES (5, N'CollegeEmployee', 4, 5)
GO
INSERT [dbo].[Tbl_UserRoll] ([rollID], [rollName], [parentId], [entityType]) VALUES (6, N'Student', 4, 6)
GO
SET IDENTITY_INSERT [dbo].[Tbl_UserRoll] OFF
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [UX_ExamPaperSub]    Script Date: 08-07-2025 19:08:50 ******/
CREATE UNIQUE NONCLUSTERED INDEX [UX_ExamPaperSub] ON [dbo].[Tbl_ExamPaper]
(
	[courseSchemeID] ASC,
	[SubjectCode] ASC,
	[SubjName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[Sp_CourseScheme]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Sp_CourseScheme] --CourseSchemeList
@Action varchar(100)='',
@programeID int=null,
@courseSchemeID int=null,
@courseSchemeName varchar(100)=null,
@examPattern nvarchar(50)=null,
@isActive bit=null,
@PageNumber INT=1,
@RowsOfPage INT=5,
@SearchText NVARCHAR(MAX) ='',
@SQL NVARCHAR(MAX) = N'',
@Table2 NVARCHAR(MAX) = N''

AS
BEGIN
      If(@Action='CourseSchemeRegistration')
	  BEGIN
			INSERT INTO Tbl_CourseScheme(
				courseSchemeName,
				examPattern,
				programeID,
				isActive)
			VALUES(
				@courseSchemeName,
				@examPattern,
				@programeID,
				@isActive)
	   select 1 as StatusCode ,'CourseScheme Added Successfully ' as [Message] 
	 END
   If(@Action='UpdateCourseSchemeRegistration')
	 Begin
	 Update Tbl_CourseScheme set 
	 courseSchemeName=@courseSchemeName,@examPattern=examPattern,
	 programeID=@ProgrameID,
	 isActive=@isActive where courseSchemeID=@courseSchemeID
	 select 1 as StatusCode ,'CourseScheme Updated Successfully' as [Message]
	 End

 IF (@Action = 'CourseSchemeList')
    BEGIN
        SET NOCOUNT ON;

        DECLARE @Offset INT = (@PageNumber - 1) * @RowsOfPage;
        DECLARE @TotalRecords INT = 0;
        DECLARE @TotalPages INT = 0;

        -- Base WHERE clause
        DECLARE @WhereClause NVARCHAR(MAX) = N'1=1';

        -- Add filters with parameterized placeholders
        IF @programeID IS NOT NULL
            SET @WhereClause += N' AND C.programeID = @programeID';

        IF @courseSchemeID IS NOT NULL
            SET @WhereClause += N' AND C.courseSchemeID = @courseSchemeID';

        IF @courseSchemeName IS NOT NULL
            SET @WhereClause += N' AND C.courseSchemeName LIKE ''%'' + @courseSchemeName + ''%''';

        IF @examPattern IS NOT NULL
            SET @WhereClause += N' AND C.examPattern LIKE ''%'' + @examPattern + ''%''';

        IF @isActive IS NOT NULL
            SET @WhereClause += N' AND C.isActive = @isActive';

        -- Add search text filter across multiple columns
        IF (@SearchText IS NOT NULL AND LEN(@SearchText) > 0)
        BEGIN
            SET @WhereClause += N' AND ( ' +
                N'CAST(C.courseSchemeID AS NVARCHAR(MAX)) LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'C.courseSchemeName LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'CAST(C.programeID AS NVARCHAR(MAX)) LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'CAST(C.isActive AS NVARCHAR(MAX)) LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'C.examPattern LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'P.ProgrameName LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS ' +
                N')';
        END

        -- Parameter definitions for sp_executesql
        DECLARE @ParamDefs NVARCHAR(MAX) = N'
            @programeID INT,
            @courseSchemeID INT,
            @courseSchemeName VARCHAR(100),
            @examPattern VARCHAR(100),
            @isActive BIT,
            @SearchText NVARCHAR(MAX),
            @TotalRecordsOut INT OUTPUT';

        -- Count total records
        DECLARE @CountSQL NVARCHAR(MAX) = N'
            SELECT @TotalRecordsOut = COUNT(*)
            FROM Tbl_CourseScheme C
            INNER JOIN Tbl_ProgrameMaster P ON C.programeID = P.ProgrameID
            WHERE ' + @WhereClause;

        EXEC sp_executesql @CountSQL, @ParamDefs,
            @programeID = @programeID,
            @courseSchemeID = @courseSchemeID,
            @courseSchemeName = @courseSchemeName,
            @examPattern = @examPattern,
            @isActive = @isActive,
            @SearchText = @SearchText,
            @TotalRecordsOut = @TotalRecords OUTPUT;

        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        -- Select paged data
        DECLARE @DataSQL NVARCHAR(MAX) = N'
            SELECT
                C.courseSchemeID,
                C.courseSchemeName,
                C.programeID,
                C.isActive,
                P.ProgrameName,
                C.examPattern
            FROM Tbl_CourseScheme C
            INNER JOIN Tbl_ProgrameMaster P ON C.programeID = P.ProgrameID
            WHERE ' + @WhereClause + '
            ORDER BY C.courseSchemeID
            OFFSET @Offset ROWS
            FETCH NEXT @RowsOfPage ROWS ONLY;';

        -- Add offset and rows parameters
        SET @ParamDefs += N', @Offset INT, @RowsOfPage INT';

        EXEC sp_executesql @DataSQL, @ParamDefs,
            @programeID = @programeID,
            @courseSchemeID = @courseSchemeID,
            @courseSchemeName = @courseSchemeName,
            @examPattern = @examPattern,
            @isActive = @isActive,
            @SearchText = @SearchText,
            @TotalRecordsOut = @TotalRecords OUTPUT,
            @Offset = @Offset,
            @RowsOfPage = @RowsOfPage;

        -- Return total records and pages
        SELECT @TotalRecords AS TotalRecords, @TotalPages AS TotalPages;
    END
End
GO
/****** Object:  StoredProcedure [dbo].[Sp_CourseScheme_Test]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Sp_CourseScheme_Test]
@Action varchar(100)='CourseSchemeList',
@programeID int=null,
@courseSchemeID int=null,
@courseSchemeName varchar(100)=null,
@examPattern varchar(100)=null,
@isActive bit=null,
@PageNumber INT=1,
@RowsOfPage INT=10,
@SearchText NVARCHAR(MAX) ='bca',
@SQL NVARCHAR(MAX) = N'',
@Table2 NVARCHAR(MAX) = N''

AS
BEGIN
      If(@Action='CourseSchemeRegistration')
	  BEGIN
			INSERT INTO Tbl_CourseScheme(
				courseSchemeName,
				examPattern,
				programeID,
				isActive)
			VALUES(
				@courseSchemeName,
				@examPattern,
				@programeID,
				@isActive)
	   select 1 as StatusCode ,'CourseScheme Added Successfully ' as [Message] 
	 END
   If(@Action='UpdateCourseSchemeRegistration')
	 Begin
	 Update Tbl_CourseScheme set 
	 courseSchemeName=@courseSchemeName,examPattern=@examPattern,
	 programeID=@ProgrameID,
	 isActive=@isActive where courseSchemeID=@courseSchemeID
	 select 1 as StatusCode ,'CourseScheme Updated Successfully' as [Message]
	 End
     

   IF (@Action = 'CourseSchemeList')
    BEGIN
        SET NOCOUNT ON;

        DECLARE @Offset INT = (@PageNumber - 1) * @RowsOfPage;
        DECLARE @TotalRecords INT = 0;
        DECLARE @TotalPages INT = 0;

        -- Base WHERE clause
        DECLARE @WhereClause NVARCHAR(MAX) = N'1=1';

        -- Add filters with parameterized placeholders
        IF @programeID IS NOT NULL
            SET @WhereClause += N' AND C.programeID = @programeID';

        IF @courseSchemeID IS NOT NULL
            SET @WhereClause += N' AND C.courseSchemeID = @courseSchemeID';

        IF @courseSchemeName IS NOT NULL
            SET @WhereClause += N' AND C.courseSchemeName LIKE ''%'' + @courseSchemeName + ''%''';

        IF @examPattern IS NOT NULL
            SET @WhereClause += N' AND C.examPattern LIKE ''%'' + @examPattern + ''%''';

        IF @isActive IS NOT NULL
            SET @WhereClause += N' AND C.isActive = @isActive';

        -- Add search text filter across multiple columns
        IF (@SearchText IS NOT NULL AND LEN(@SearchText) > 0)
        BEGIN
            SET @WhereClause += N' AND ( ' +
                N'CAST(C.courseSchemeID AS NVARCHAR(MAX)) LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'C.courseSchemeName LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'CAST(C.programeID AS NVARCHAR(MAX)) LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'CAST(C.isActive AS NVARCHAR(MAX)) LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'C.examPattern LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS OR ' +
                N'P.ProgrameName LIKE ''%'' + @SearchText + ''%'' COLLATE SQL_Latin1_General_CP1_CI_AS ' +
                N')';
        END

        -- Parameter definitions for sp_executesql
        DECLARE @ParamDefs NVARCHAR(MAX) = N'
            @programeID INT,
            @courseSchemeID INT,
            @courseSchemeName VARCHAR(100),
            @examPattern VARCHAR(100),
            @isActive BIT,
            @SearchText NVARCHAR(MAX),
            @TotalRecordsOut INT OUTPUT';

        -- Count total records
        DECLARE @CountSQL NVARCHAR(MAX) = N'
            SELECT @TotalRecordsOut = COUNT(*)
            FROM Tbl_CourseScheme C
            INNER JOIN Tbl_ProgrameMaster P ON C.programeID = P.ProgrameID
            WHERE ' + @WhereClause;

        EXEC sp_executesql @CountSQL, @ParamDefs,
            @programeID = @programeID,
            @courseSchemeID = @courseSchemeID,
            @courseSchemeName = @courseSchemeName,
            @examPattern = @examPattern,
            @isActive = @isActive,
            @SearchText = @SearchText,
            @TotalRecordsOut = @TotalRecords OUTPUT;
        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        -- Select paged data
        DECLARE @DataSQL NVARCHAR(MAX) = N'
            SELECT
                C.courseSchemeID,
                C.courseSchemeName,
                C.programeID,
                C.isActive,
                P.ProgrameName,
                C.examPattern
            FROM Tbl_CourseScheme C
            INNER JOIN Tbl_ProgrameMaster P ON C.programeID = P.ProgrameID
            WHERE ' + @WhereClause + '  ORDER BY C.courseSchemeID
            OFFSET @Offset ROWS FETCH NEXT @RowsOfPage ROWS ONLY;';
        -- Add offset and rows parameters
        SET @ParamDefs += N', @Offset INT, @RowsOfPage INT';

        EXEC sp_executesql @DataSQL, @ParamDefs,
            @programeID = @programeID,
            @courseSchemeID = @courseSchemeID,
            @courseSchemeName = @courseSchemeName,
            @examPattern = @examPattern,
            @isActive = @isActive,
            @SearchText = @SearchText,
            @TotalRecordsOut = @TotalRecords OUTPUT,
            @Offset = @Offset,
            @RowsOfPage = @RowsOfPage;

        -- Return total records and pages
        SELECT @TotalRecords AS TotalRecords, @TotalPages AS TotalPages;
    END
    

End
GO
/****** Object:  StoredProcedure [dbo].[Sp_Designation]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--create Table Tbl_Designation(
--dId int identity(1,1) Not Null,
--Designation varchar(20) Null,
--IsActive int null
--)

CREATE Procedure [dbo].[Sp_Designation] --'GetAllDesignation'
@Action nvarchar(1000) =null

as
Begin
        IF(@Action='GetAllDesignation')
	    BEGIN
		select dId, Designation from Tbl_Designation where IsActive=1
        END

End
GO
/****** Object:  StoredProcedure [dbo].[Sp_Exam_Schedule]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_Exam_Schedule]
   @Action VARCHAR(50) = null,
   @examScheduleID int = null,
   @programeId int = null,
   @batch_Id int = null,
   @semester_year int= null,
   @examSession varchar(20) = null,
   @openDate date= null,
   @closeDate date= null,
   @studentID int = null,
   @courseSchemeId int =null,
   @userID int = null,
   @SubjectCourseID int =null,
   @examdate Date =null,
   @SemYear int =null,
   @TheoryMax int= null,
   @TheoryMin  int= null,
   @obtainTheory  int= null,
   @PractMax  int= null,
   @PractMin  int= null,
   @obtainPractical  int= null,
   @SesMax  int= null,
   @SesMin  int= null,
   @obtainSess  int= null,
   @MaxTotal  int= null,
   @MinTotal  int= null,
   @obtainMAx  int= null

AS
BEGIN
If(@Action='createExameSchedule')
 Begin
  insert into Tbl_ExamSchedule 
  (
   programeId
   ,batch_Id
   ,semester_year
   ,examSession
   ,openDate
   ,closeDate
  )
 values(@programeId
   ,@batch_Id
   ,@semester_year
   ,@examSession
   ,@openDate
   ,@closeDate)
 select 1 as StatusCode ,'Exam Create Successfully' as [Message]
 End
 if(@Action='ExameScheduleList')
 Begin
   select ES.examScheduleID,PM.ProgrameName,BM.Batch_name,SY.Sem_Year_Name,ES.programeId,ES.batch_Id,ES.semester_year,ES.examSession,
   convert(varchar(10),ES.openDate,103) as openDate,
   convert(varchar(10),ES.closeDate,120) as closeDate
  from [Tbl_ExamSchedule] ES 
  inner join Tbl_ProgrameMaster PM on ES.programeId =PM.ProgrameID
  inner join Batch_master BM on ES.batch_Id=BM.Batch_ID
  inner Join MST_Sem_Year SY on ES.semester_year = SY.Sem_YearID
 END
  if(@Action='ExameScheduleListforStudent')
 Begin
   select ES.examScheduleID,PM.ProgrameName,BM.Batch_name,SY.Sem_Year_Name,ES.programeId,ES.batch_Id,ES.semester_year,ES.examSession,
   convert(varchar(10),ES.openDate,103) as openDate,
   convert(varchar(10),ES.closeDate,120) as closeDate,
   isExamFormFill
  from [Tbl_ExamSchedule] ES 
  inner join Tbl_ProgrameMaster PM on ES.programeId =PM.ProgrameID
  inner join Batch_master BM on ES.batch_Id=BM.Batch_ID
  Inner Join Tbl_ExamSchedule_Student ESS on ES.examScheduleID=ESS.examScheduleID
  inner Join MST_Sem_Year SY on ES.semester_year = SY.Sem_YearID where ES.batch_Id=@batch_Id and ESS.studentID=@studentID
 END

 if(@Action='GetPaperForExam')
 Begin
 If(@studentID=0)
 Begin
 set @courseSchemeId= (select coursScheme from Batch_master where Batch_ID=@batch_Id)
 Select *,'' as examdate from Tbl_ExamPaper where [courseSchemeID]=@courseSchemeId and [SemYear]=@semester_year
 End
 Else
 Begin
 Select EP.SubjName,EP.SubjectCode,EP.SubjectCourseID,convert(varchar(10),ES.examdate,	120) as examdate  from Tbl_ExamPaper EP Inner Join Tbl_ExamStudentSlots_Marks ES on EP.SubjectCourseID=ES.SubjectCourseID where ES.SemYear=@semester_year
 End
 
 End

 If(@Action='StudentExamSlotCreate')
 Begin
 declare @isCheck int=null;
 set @isCheck =(select count(*) from Tbl_ExamStudentSlots_Marks where examScheduleID=@examScheduleID and studentID=@studentID and SemYear=@SemYear and SubjectCourseID=@SubjectCourseID);
 If(@isCheck=0)
 Begin
       insert into Tbl_ExamStudentSlots_Marks(
       examScheduleID,studentID,userID,SubjectCourseID,examdate,SemYear,TheoryMax,TheoryMin,obtainTheory,PractMax,PractMin,obtainPractical,SesMax,SesMin,obtainSess,MaxTotal,MinTotal,obtainMAx)
	   values (@examScheduleID,@studentID,@userID,@SubjectCourseID,@examdate,@SemYear,@TheoryMax,@TheoryMin,@obtainTheory,@PractMax,@PractMin,@obtainPractical,@SesMax,@SesMin,@obtainSess,@MaxTotal,@MinTotal,@obtainMAx)
	   update [Tbl_ExamSchedule_Student] set [isExamFormFill]=1 where studentID=@studentID;
       select 1 as StatusCode, 'Exam Slots Successfully Save..' as [Message]
 End
 Else
 Begin
 select 3 as StatusCode, 'Exam Slots Already Book By You...' as [Message]
 End
 End


 If(@Action='StudentExamSlotUpdate')
 Begin
 Update [Tbl_ExamStudentSlots_Marks] set [examdate]=@examdate where SubjectCourseID=@SubjectCourseID and studentID=@studentID
select 1 as StatusCode, 'Exam Slots Successfully Updated..' as [Message]
 End
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_ExamPaper]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_ExamPaper]
    @Action VARCHAR(50) = 'paperList',
    @CourseSchemeID INT = NULL,
    @SemYear INT = NULL,
    @examPattern nvarchar(100)= null,
    @IsCompulsory INT = NULL,
    @SubjSeq INT = NULL,
    @SubjName NVARCHAR(1000) = NULL,
    @SubjectCode NVARCHAR(1000) = NULL,
    @TheoryMax INT = NULL,
    @TheoryMin INT = NULL,
    @PractMax INT = NULL,
    @PractMin INT = NULL,
    @SesMax INT = NULL,
    @SesMin INT = NULL,
    @MaxTotal INT = NULL,
    @MinTotal INT = NULL,
	@Passing_On_Rule varchar(100) =null,
    @ActiveStatus BIT = NULL,
    @PageNumber INT = 1,
    @RowsOfPage INT = 10,
    @SearchText NVARCHAR(MAX)=''
AS
BEGIN
    
     If(@Action='InsertPaper')
 Begin
 declare @isExist int=0;
 set @isExist =(SELECT count(*) FROM Tbl_ExamPaper WHERE courseSchemeID = @courseSchemeID AND SubjName = @SubjName AND SubjectCode = @SubjectCode AND SubjSeq = @SubjSeq)
 --IF NOT EXISTS (SELECT 1 FROM Tbl_ExamPaper WHERE courseSchemeID = @courseSchemeID AND SubjName = @SubjName AND SubjectCode = @SubjectCode AND SubjSeq = @SubjSeq)
  if(@isExist=0)
  Begin
 insert into Tbl_ExamPaper(examPattern,courseSchemeID,SemYear,IsCompulsory,SubjSeq,SubjName,SubjectCode,TheoryMax,TheoryMin,PractMax,PractMin,SesMax,SesMin,MaxTotal,Passing_On_Rule,ActiveStatus)
 values(@examPattern,@courseSchemeID,@SemYear,@IsCompulsory,@SubjSeq,@SubjName,@SubjectCode,@TheoryMax,@TheoryMin,@PractMax,@PractMin,@SesMax,@SesMin,@MaxTotal,@Passing_On_Rule,@ActiveStatus)
 select 1 as StatusCode ,'Papers Added Successfully' as [Message], @isExist as [count]
End
	else
		begin
		 select 1 as StatusCode ,'Papers Already added' as [Message], @isExist as [count]
		end
 End
    IF (@Action = 'paperList')
    BEGIN
	SET NOCOUNT ON;
        DECLARE @Offset INT = (@PageNumber - 1) * @RowsOfPage;
        DECLARE @WhereClause NVARCHAR(MAX) = N'1=1';
        DECLARE @TotalRecords INT = 0, @TotalPages INT = 0;
        -- Dynamic filters
        IF @CourseSchemeID IS NOT NULL
            SET @WhereClause += ' AND CourseSchemeID = @CourseSchemeID';
        IF @SemYear IS NOT NULL
            SET @WhereClause += ' AND SemYear = @SemYear';
        IF @IsCompulsory IS NOT NULL
            SET @WhereClause += ' AND IsCompulsory = @IsCompulsory';
        IF @SubjSeq IS NOT NULL
            SET @WhereClause += ' AND SubjSeq = @SubjSeq';
        IF @SubjName IS NOT NULL
            SET @WhereClause += ' AND SubjName LIKE ''%'' + @SubjName + ''%''';
        IF @SubjectCode IS NOT NULL
            SET @WhereClause += ' AND SubjectCode LIKE ''%'' + @SubjectCode + ''%''';
        IF @TheoryMax IS NOT NULL
            SET @WhereClause += ' AND TheoryMax = @TheoryMax';
        IF @TheoryMin IS NOT NULL
            SET @WhereClause += ' AND TheoryMin = @TheoryMin';
        IF @PractMax IS NOT NULL
            SET @WhereClause += ' AND PractMax = @PractMax';
        IF @PractMin IS NOT NULL
            SET @WhereClause += ' AND PractMin = @PractMin';
        IF @SesMax IS NOT NULL
            SET @WhereClause += ' AND SesMax = @SesMax';
        IF @SesMin IS NOT NULL
            SET @WhereClause += ' AND SesMin = @SesMin';
        IF @MaxTotal IS NOT NULL
            SET @WhereClause += ' AND MaxTotal = @MaxTotal';
        --IF @MinTotal IS NOT NULL
        --    SET @WhereClause += ' AND MinTotal = @MinTotal';
        IF @ActiveStatus IS NOT NULL
            SET @WhereClause += ' AND ActiveStatus = @ActiveStatus';

        -- Apply search text across relevant fields
        IF @SearchText IS NOT NULL AND LEN(@SearchText) > 0
        BEGIN
            SET @WhereClause += N' AND (
                CAST(CourseSchemeID AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                SubjName LIKE ''%'' + @SearchText + ''%'' OR
                SubjectCode LIKE ''%'' + @SearchText + ''%'' OR
                CAST(SemYear AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(SubjSeq AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(TheoryMax AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(TheoryMin AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(PractMax AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(PractMin AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(SesMax AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(SesMin AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'' OR
                CAST(MaxTotal AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'')';
               -- CAST(MinTotal AS NVARCHAR) LIKE ''%'' + @SearchText + ''%'')';
        END

        -- Count query
        DECLARE @SQL_Count NVARCHAR(MAX) = N'
            SELECT @TotalRecordsOut = COUNT(*) 
            FROM Tbl_ExamPaper 
            WHERE ' + @WhereClause;

        EXEC sp_executesql @SQL_Count,
            N'@CourseSchemeID INT, @SemYear INT, @IsCompulsory INT, @SubjSeq INT,
              @SubjName NVARCHAR(1000), @SubjectCode NVARCHAR(1000),
              @TheoryMax INT, @TheoryMin INT, @PractMax INT, @PractMin INT,
              @SesMax INT, @SesMin INT, @MaxTotal INT, @ActiveStatus BIT,
              @SearchText NVARCHAR(MAX), @TotalRecordsOut INT OUTPUT',
            @CourseSchemeID, @SemYear, @IsCompulsory, @SubjSeq,
            @SubjName, @SubjectCode,
            @TheoryMax, @TheoryMin, @PractMax, @PractMin,
            @SesMax, @SesMin, @MaxTotal, @ActiveStatus,
            @SearchText, @TotalRecordsOut = @TotalRecords OUTPUT;

        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        -- Data query
        DECLARE @SQL_Data NVARCHAR(MAX) = N'
            SELECT *
            FROM Tbl_ExamPaper
            WHERE ' + @WhereClause + '
            ORDER BY SubjectCode
            OFFSET @Offset ROWS FETCH NEXT @RowsOfPage ROWS ONLY';

        EXEC sp_executesql @SQL_Data,
            N'@CourseSchemeID INT, @SemYear INT, @IsCompulsory INT, @SubjSeq INT,
              @SubjName NVARCHAR(1000), @SubjectCode NVARCHAR(1000),
              @TheoryMax INT, @TheoryMin INT, @PractMax INT, @PractMin INT,
              @SesMax INT, @SesMin INT, @MaxTotal INT,@ActiveStatus BIT,
              @SearchText NVARCHAR(MAX), @Offset INT, @RowsOfPage INT',
            @CourseSchemeID, @SemYear, @IsCompulsory, @SubjSeq,
            @SubjName, @SubjectCode,
            @TheoryMax, @TheoryMin, @PractMax, @PractMin,
            @SesMax, @SesMin, @MaxTotal,@ActiveStatus,
            @SearchText, @Offset, @RowsOfPage;

        -- Return total records & pages
        SELECT @TotalRecords AS TotalRecords, @TotalPages AS TotalPages;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_ExamPaperQuestionBank]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Sp_ExamPaperQuestionBank]
    @Action VARCHAR(50) = null,
    @questionId int = null,
	@paperID int = null,
	@question nvarchar(max) = null,
	@optionA nvarchar(1000)= null,
	@optionB nvarchar(1000)= null,
	@optionC nvarchar(100) = null,
	@optionD nvarchar(1000)=  null,
	@answer nvarchar(10) =null,
	@isActive bit = null,
	@studentID int = null, 
	@givenAnswer varchar(10) = null,
	@examSession varchar(100) = null
AS
BEGIN
If(@Action='InsertQuestion')
 Begin
 declare @isExist int=0;
  insert into Tbl_ExamQuestionBank(paperID,question,optionA,optionB,optionC,optionD,answer,isActive)
 values(@paperID,@question,@optionA,@optionB,@optionC,@optionD,@answer,1)
 select 1 as StatusCode ,'Question Added Successfully' as [Message], @isExist as [count]
 End

 IF(@Action='GetQuestion')
 BEGIN
 select Top 15 paperID,questionId,question,optionA,optionB,optionC,optionD,'' as givenAnswer from Tbl_ExamQuestionBank where paperID=1 ORDER BY NEWID();
 END
 IF(@Action='ExamAnswerSubmit')
 BEGIN
 INSERT INTO Tbl_studentExamSubmit(studentID,paperID,questionId,answer,givenAnswer,examSession) values(@studentID,@paperID,@questionId,@answer,@givenAnswer,@examSession)
 UPDATE Tbl_studentExamSubmit SET Tbl_studentExamSubmit.answer = Tbl_ExamQuestionBank.answer
FROM Tbl_studentExamSubmit
JOIN Tbl_ExamQuestionBank
ON [Tbl_studentExamSubmit].[questionId] = Tbl_ExamQuestionBank.[questionId]
 END
END



UPDATE Tbl_studentExamSubmit SET Tbl_studentExamSubmit.answer = Tbl_ExamQuestionBank.answer
FROM Tbl_studentExamSubmit
JOIN Tbl_ExamQuestionBank
ON [Tbl_studentExamSubmit].[questionId] = Tbl_ExamQuestionBank.[questionId]
GO
/****** Object:  StoredProcedure [dbo].[Sp_ProgrameManagment]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Sp_ProgrameManagment] --GetProgrameDDL
@Action varchar(100)=null,
@ProgrameID int=null,
@ProgrameName varchar(300)=NULL,
@ProgrameDuration varchar(100)=NULL,
@ProgrameLebel varchar(200)=NULL,
@PageNumber INT=1,
@RowsOfPage INT=2,
@SearchText NVARCHAR(MAX) ='',
@SQL NVARCHAR(MAX) = N'',
@Table2 NVARCHAR(MAX) = N''

AS
BEGIN
     IF(@Action='InsertProgrameMaster')
	 BEGIN
	 INSERT INTO Tbl_ProgrameMaster(
	 ProgrameName,
     ProgrameDuration,
     ProgrameLebel
	 )
	 VALUES(
	 @ProgrameName,
	 @ProgrameDuration,
	 @ProgrameLebel
	 )
	--select @@identity,
	   select 1 as StatusCode ,'Programe Added Successfully' as [Message] 
	 END
	 If(@Action='UpdateProgrameMaster')
	 Begin
	 Update Tbl_ProgrameMaster set 
	 ProgrameName=@ProgrameName,
	 ProgrameDuration=@ProgrameDuration,
	 ProgrameLebel=@ProgrameLebel where ProgrameID=@ProgrameID
	 select 1 as StatusCode ,'Programe Updated Successfully' as [Message]
	 End
     if(@Action='GetProgrameList')
     BEGIN
              SET NOCOUNT ON;
    DECLARE @Offset INT = (@PageNumber - 1) * @RowsOfPage;
    DECLARE @WhereClause NVARCHAR(MAX) = '';
    DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;

    IF @SearchText = ''
    BEGIN
        SELECT @TotalRecords = COUNT(*) FROM Tbl_ProgrameMaster;
        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        SELECT *
        FROM Tbl_ProgrameMaster
        ORDER BY ProgrameID
        OFFSET @Offset ROWS
        FETCH NEXT @RowsOfPage ROWS ONLY;
		select @TotalRecords AS TotalRecords, @TotalPages AS TotalPages
    END
    ELSE
    BEGIN
        -- Dynamically build WHERE clause
        SELECT @WhereClause = STRING_AGG(
            'CAST(' + QUOTENAME(COLUMN_NAME) + ' AS NVARCHAR(MAX)) LIKE ''%' + @SearchText + '%''',
            ' OR '
        )
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = 'Tbl_ProgrameMaster';

        -- Get total records matching search
        SET @SQL = N'SELECT @TotalRecordsOut = COUNT(*) FROM Tbl_ProgrameMaster WHERE ' + @WhereClause;
        EXEC sp_executesql @SQL, N'@TotalRecordsOut INT OUTPUT', @TotalRecordsOut = @TotalRecords OUTPUT;

        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        -- Get paginated filtered data
        SET @SQL = 'SELECT * FROM Tbl_ProgrameMaster WHERE ' + @WhereClause + 'ORDER BY ProgrameID
            OFFSET ' + CAST(@Offset AS NVARCHAR) + ' ROWS FETCH NEXT ' + CAST(@RowsOfPage AS NVARCHAR) + ' ROWS ONLY';

	    SET @Table2 ='SELECT ' + CAST(@TotalRecords AS NVARCHAR) + ' AS TotalRecords, ' + 
                        CAST(@TotalPages AS NVARCHAR) + ' AS TotalPages';

        EXEC sp_executesql @SQL;
		EXEC sp_executesql @Table2;
    END
  END
	 If(@Action='GetProgrameDDL')
	 Begin
	 select ProgrameName,ProgrameID from Tbl_ProgrameMaster
	 End
	 If(@Action='GetBatchDDL')
	 Begin
	 select Batch_ID,Batch_Name from Batch_master
	 End
End
GO
/****** Object:  StoredProcedure [dbo].[Sp_ProgrameManagmenttest]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_ProgrameManagmenttest] 
@Action Varchar(100)='GetProgrameList',
@ProgrameID int=null,
@ProgrameName varchar(300)=NULL,
@ProgrameDuration varchar(100)=NULL,
@ProgrameLebel varchar(200)=NULL,
@PageNumber INT=1,
@RowsOfPage INT=2,
@SearchText NVARCHAR(MAX) ='',
@SQL NVARCHAR(MAX) = N'',
@Table2 NVARCHAR(MAX) = N''

AS
BEGIN
     IF(@Action='InsertProgrameMaster')
	 BEGIN
	 INSERT INTO Tbl_ProgrameMaster(
	 ProgrameName,
     ProgrameDuration,
     ProgrameLebel
	 )
	 VALUES(
	 @ProgrameName,
	 @ProgrameDuration,
	 @ProgrameLebel
	 )
	--select @@identity,
	   select 1 as StatusCode ,'Programe Added Successfully' as [Message] 
	 END
	 
     if(@Action='GetProgrameList')
     BEGIN
    SET NOCOUNT ON;
    DECLARE @Offset INT = (@PageNumber - 1) * @RowsOfPage;
    DECLARE @WhereClause NVARCHAR(MAX) = '';
    DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;

    IF @SearchText = ''
    BEGIN
	    SET @TotalRecords =(Select COUNT(*) FROM Tbl_ProgrameMaster);
        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);
	select(select( SELECT *
        FROM Tbl_ProgrameMaster
        ORDER BY ProgrameID
        OFFSET @Offset ROWS
        FETCH NEXT @RowsOfPage ROWS ONLY
		FOR JSON PATH
	)as Programe,
	(
	    select @TotalRecords AS TotalRecords, @TotalPages AS TotalPages
		 FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
	   ) as Pagination   
	  FOR JSON PATH, WITHOUT_ARRAY_WRAPPER) as dataObject
       
    END
    ELSE
    BEGIN
        -- Dynamically build WHERE clause
        SELECT @WhereClause = STRING_AGG(
            'CAST(' + QUOTENAME(COLUMN_NAME) + ' AS NVARCHAR(MAX)) LIKE ''%' + @SearchText + '%''',
            ' OR '
        )
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = 'Tbl_ProgrameMaster';

        -- Get total records matching search
        SET @SQL = N'SELECT @TotalRecordsOut = COUNT(*) FROM Tbl_ProgrameMaster WHERE ' + @WhereClause;
        EXEC sp_executesql @SQL, N'@TotalRecordsOut INT OUTPUT', @TotalRecordsOut = @TotalRecords OUTPUT;

        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        -- Get paginated filtered data
        SET @SQL = 'SELECT * FROM Tbl_ProgrameMaster WHERE ' + @WhereClause + 'ORDER BY ProgrameID
            OFFSET ' + CAST(@Offset AS NVARCHAR) + ' ROWS FETCH NEXT ' + CAST(@RowsOfPage AS NVARCHAR) + ' ROWS ONLY';

	    SET @Table2 ='SELECT ' + CAST(@TotalRecords AS NVARCHAR) + ' AS TotalRecords, ' + 
                        CAST(@TotalPages AS NVARCHAR) + ' AS TotalPages';

        EXEC sp_executesql @SQL;
		EXEC sp_executesql @Table2;
    END
  END
End






--  Sp_ProgrameManagmenttest
--{"Programe":[{"ProgrameID":1,"ProgrameName":"BCA","ProgrameDuration":"3 Year","ProgrameLebel":"UG"},{"ProgrameID":2,"ProgrameName":"DCA","ProgrameDuration":"1 Year","ProgrameLebel":"Diploma"}],"Paginationtemp":"{\"Pagination\":[{\"TotalRecords\":17,\"TotalPages\":9}]}"}
--{"Programe":[{"ProgrameID":1,"ProgrameName":"BCA","ProgrameDuration":"3 Year","ProgrameLebel":"UG"},{"ProgrameID":2,"ProgrameName":"DCA","ProgrameDuration":"1 Year","ProgrameLebel":"Diploma"}],"Pagination":"{\"TotalRecords\":17,\"TotalPages\":9}"}
GO
/****** Object:  StoredProcedure [dbo].[Sp_Role]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[Sp_Role] --'GetAllRoll'
@Action nvarchar(1000) =null

as
Begin
        IF(@Action='GetAllRoll')
	    BEGIN
		select roleId, role from Role_Table where ActiveStatus=1
        END

End

GO
/****** Object:  StoredProcedure [dbo].[Sp_StudentAction]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[Sp_StudentAction] 
@Action nvarchar(1000) =null,
@studentID int =null,
@userID int =null,
@fullname varchar(200) =null,
@email varchar(200) =null,
@phoneNumber varchar(20) =null,
@dob datetime =null,
@gender varchar(10)=null,
@activeStatus bit =null,
@entityType int =null,
@parentId int=null,
@userName varchar(200)=null,
@passwordhash varchar(max) =null,
@userrole varchar(200)=null,
@lastLogin date =null,
@chechUser int=null,
@PageNumber INT=1,
@RowsOfPage INT=5,
@SearchText NVARCHAR(MAX) ='',
@SQL NVARCHAR(MAX) = N'',
@Table2 NVARCHAR(MAX) = N''
as
Begin
  --      IF(@Action='UserLogin')
	 --   BEGIN
		----select count(*) as usercount,[loginID] from [Tbl_User_login] where loginID=@loginID and Password=@Password
		--select 
		--loginID,userName,fullname,email,phoneNumber,gender,userId
		--from [Tbl_User_login] where loginID=@loginID and Password=@Password
  --      END
IF(@Action='InsertLogin')
BEGIN
set @chechUser= (select count(userName) userName from Tbl_Login where userName=@userName)
IF(@chechUser>0)
BEGIN
select 0 as StatusCode
END
ELSE
BEGIN
INSERT INTO Tbl_Login(userName,passwordhash,activeStatus,userrole,lastLogin,entityTypeId,parentId) 
                     values(@userName,@passwordhash,@activeStatus,@userrole,@lastLogin,6,@parentId)
	  select @@IDENTITY
END
END


IF(@Action='InsertStudent')
BEGIN set @chechUser= (select count(phoneNumber) [phoneNumber] from Tbl_StudentInfo where [phoneNumber]=@phoneNumber)
IF(@chechUser>0)
BEGIN
 select 3 as StatusCode, 'User Already Exist'  as [Message]
END
ELSE
  BEGIN 
  INSERT INTO Tbl_StudentInfo(userID,fullname,email,phoneNumber,gender,dob,activeStatus,entityType,parentId)
	  values(@userID,@fullname,@email,@phoneNumber,@gender,@dob,@activeStatus,6,@parentId)
	  select 1 as StatusCode ,'User Registration Successfully' as [Message]
  END
END

IF(@Action='StudentList')
		begin
		SET NOCOUNT ON;
		DECLARE @Offset INT = (@PageNumber - 1) * @RowsOfPage;
		DECLARE @WhereClause NVARCHAR(MAX) = '';
		DECLARE @TotalRecords INT;
		DECLARE @TotalPages INT;
		If(@SearchText='')
		begin
		    DECLARE @MaxTablePage  AS float
				SELECT @MaxTablePage = COUNT(*) FROM [Tbl_StudentInfo]
				SET @MaxTablePage = CEILING(@MaxTablePage/@RowsOfPage)
			SELECT userID,fullname,email,phoneNumber,gender,convert(varchar(10),dob,103) as dob ,activeStatus FROM [Tbl_StudentInfo]
			ORDER BY [UserId] 
			OFFSET (@PageNumber-1)*@RowsOfPage ROWS
			FETCH NEXT @RowsOfPage ROWS ONLY
			select (Select count (*) from [Tbl_StudentInfo]) as totalRecord, @MaxTablePage as TotalPage
		end
		else
		begin
		     SELECT @WhereClause = STRING_AGG(
            'CAST(' + QUOTENAME(COLUMN_NAME) + ' AS NVARCHAR(MAX)) LIKE ''%' + @SearchText + '%''',
            ' OR '
        )
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = 'Tbl_StudentInfo';

        -- Get total records matching search
        SET @SQL = N'SELECT @TotalRecordsOut = COUNT(*) FROM Tbl_StudentInfo WHERE ' + @WhereClause;
        EXEC sp_executesql @SQL, N'@TotalRecordsOut INT OUTPUT', @TotalRecordsOut = @TotalRecords OUTPUT;

        SET @TotalPages = CEILING(1.0 * @TotalRecords / @RowsOfPage);

        -- Get paginated filtered data
        SET @SQL = 'SELECT userID,fullname,email,phoneNumber,gender,convert(varchar(10),dob,103) as dob ,activeStatus FROM Tbl_StudentInfo WHERE ' + @WhereClause + 'ORDER BY userID
            OFFSET ' + CAST(@Offset AS NVARCHAR) + ' ROWS FETCH NEXT ' + CAST(@RowsOfPage AS NVARCHAR) + ' ROWS ONLY';

	    SET @Table2 ='SELECT ' + CAST(@TotalRecords AS NVARCHAR) + ' AS TotalRecords, ' + 
                        CAST(@TotalPages AS NVARCHAR) + ' AS TotalPages';

        EXEC sp_executesql @SQL;
		EXEC sp_executesql @Table2;
		end
			
		End
END

GO
/****** Object:  StoredProcedure [dbo].[Sp_UserAction]    Script Date: 08-07-2025 19:08:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[Sp_UserAction] --'UserLogin','12345','admin'
@Action nvarchar(1000) =null,
@loginID  nvarchar(50) =null,
@Password nvarchar(max) =null,
@Fullname nvarchar(1000) =null,
@Email nvarchar(200) =null,
@PhoneNumber nvarchar(50) =null,
@gender nvarchar(10) = null,
@Username nvarchar(1000) =null,
@chechUser int=null,
@PageNumber INT=0,
@RowsOfPage INT=0,
@SearchText NVARCHAR(MAX) ='',
@SQL NVARCHAR(MAX) = N'',
@TEMPENTITY INT =NULL,
@userID int =null,
@passwordhash nvarchar(max)=null,
@entityTypeId int=null

as
Begin
        IF(@Action='UserLogin')
	    BEGIN
		--select count(*) as usercount,[loginID] from [Tbl_User_login] where loginID=@loginID and Password=@Password
		select 
		loginID,userName,fullname,email,phoneNumber,gender,userId
		from [Tbl_User_login] where loginID=@loginID and Password=@Password
        END

		IF(@Action='UserLogin11')
	    BEGIN      
		Set @TEMPENTITY =(select entityTypeId from [Tbl_Login] where userName=@loginID and passwordhash=@Password)

		IF(@TEMPENTITY=6)
		BEGIN
		  select TL.userID,TL.userName,TL.entityTypeId,TS.studentID,TS.fullname,TS.email,TS.phoneNumber,TS.gender,TS.dob,TS.Batch_ID FROM [Tbl_Login] TL INNER JOIN [Tbl_StudentInfo] TS ON TL.userID=TS.userID
		  where TL.userName=@loginID and TL.passwordhash=@Password
		END
		ELSE
		BEGIN
		select TL.userID,TL.userName,TL.entityTypeId,TS.fullname,TS.email,TS.phoneNumber,TS.gender,TS.dob,TS.departmentID,TS.staffCode,TS.designation FROM [Tbl_Login] TL INNER JOIN [Tbl_StaffInfo] TS ON TL.userID=TS.userID
		  where TL.userName=@loginID and TL.passwordhash=@Password
		END
		
        END


IF(@Action='UserRegistration')
begin
     set @chechUser= (select count(loginID) [loginID] from [Tbl_User_login] where loginID=@loginID)
     if(@chechUser=0)
	    BEGIN
		insert into [Tbl_User_login]
		(loginID,
		Password,
		Fullname,
		Email,
		PhoneNumber,
		gender,
		Username)
		values (
		@loginID,
		@Password,
		@Fullname,
		@Email,
		@PhoneNumber,
		@gender,
		@Username)
		select 1 as StatusCode ,'User Registration Successfully' as [Message]
		end
		Else
			Begin
					select 3 as StatusCode, 'User Already Exist'  as [Message]
			End
        
END
--UserList
IF(@Action='UserList')
		begin
		If(@SearchText='')
		begin
		    DECLARE @MaxTablePage  AS float
				SELECT @MaxTablePage = COUNT(*) FROM [Tbl_User_login]
				SET @MaxTablePage = CEILING(@MaxTablePage/@RowsOfPage)
			SELECT *,(select (Select count (*) from [Tbl_User_login])) as totalReord,@MaxTablePage as TotalPage FROM [Tbl_User_login]
			ORDER BY [UserId] 
			OFFSET (@PageNumber-1)*@RowsOfPage ROWS
			FETCH NEXT @RowsOfPage ROWS ONLY
			select (Select count (*) from [Tbl_User_login]) as total
		
		end
		else
		begin
					SELECT @SQL = @SQL + 
					CASE WHEN @SQL = '' THEN '' ELSE ' OR ' END +
					'CAST(' + QUOTENAME(COLUMN_NAME) + ' AS NVARCHAR(MAX)) LIKE ''%' + @SearchText + '%'''
						FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_NAME = 'Tbl_User_login';
					SET @SQL = 'SELECT * FROM Tbl_User_login WHERE ' + @SQL;
					EXEC sp_executesql @SQL;
		end
			
		End
END

GO
USE [master]
GO
ALTER DATABASE [ARP] SET  READ_WRITE 
GO
